openapi: "3.0.3"
info:
  title: "Group Project 3 Alta: Book-store"
  version: "1.0"
  description: "API Documentation for Bookstore-app"
  contact:
    name: Official
    url: https://Book-store.site
    email: rizuananm@gmail.com
externalDocs:
  description: "GitHub Repository of Group Project 3 : Book-store"
  url: https://bookstore-app.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/bookstore_group1/bookstore/1.0.0
  - url: 34.238.252.143:8000
    description: Base URL that will be used for endpoints
tags:
  - name: Login
    description: Endpoint for verifying who a user is
  - name: Register
    description: Endpoint for user registration
  - name: Users
    description: Endpoint for perform operations on user
  - name: Books
    description: Endpoint for perform operations on books
  - name: Carts
    description: Endpoint for perform operations on cart
  - name: Orders
    description: Endpoint for perform operations on order
paths:
  ####################################
  #  AUTHENTICATION
  ####################################
  /login:
    post:
      tags:
        - Login
      summary: Get token for access to account
      requestBody:
        $ref: "#/components/requestBodies/requestBodyLogin"
      responses:
        "200":
          $ref: "#/components/responses/loginSuccess"
        "400":
          $ref: "#/components/responses/loginFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  ####################################
  #  SIGN UP
  ####################################
  /register:
    post:
      tags:
        - Register
      summary: Create a new account for customer only
      requestBody:
        $ref: "#/components/requestBodies/requestBodyUser"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/createUserFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  ####################################
  #  USERS
  ####################################
  /users/id:
    get:
      tags:
        - Users
      summary: Get user's data by id
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getUserSuccess"
        "400":
          $ref: "#/components/responses/getDataByIdFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  /users:
    put:
      tags:
        - Users
      summary: Edit user's data by id
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/requestBodyUserUpdate"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/updateUserFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
    delete:
      tags:
        - Users
      summary: Delete user's data by id
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/deleteDataByIdFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  ####################################
  #  BOOKS
  ####################################
  /books:
    post:
      tags:
        - Books
      summary: Create books for admin only
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/requestBodyBooks"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/createBooksFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
    get:
      tags:
        - Books
      summary: Get all books
      responses:
        "200":
          $ref: "#/components/responses/getAllBooksSuccess"
        "400":
          $ref: "#/components/responses/getAllDataFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  /books/{id}:
    get:
      tags:
        - Books
      summary: Get books by id
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        "200":
          $ref: "#/components/responses/getBooksSuccess"
        "400":
          $ref: "#/components/responses/getDataByIdFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
    put:
      tags:
        - Books
      summary: Update Books by id for admin only
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        $ref: "#/components/requestBodies/requestBodyBooksUpdate"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/updateBooksFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
    delete:
      tags:
        - Books
      summary: Delete books by id for admin only
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/deleteDataByIdFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  ####################################
  #  CART
  ####################################
  /carts:
    post:
      tags:
        - Carts
      summary: Create a new cart
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/requestBodyAddCart"
      responses:
        "200":
          $ref: "#/components/responses/createcartsuccess"
        "400":
          $ref: "#/components/responses/createOrderFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
    delete:
      tags:
        - Carts
      summary: Delete cart by id
      parameters:
        - $ref: "#/components/parameters/idParam"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/deleteDataByIdFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error

  ####################################
  #  ORDERS
  ####################################
  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/requestBodyOrder"
      responses:
        "200":
          $ref: "#/components/responses/createcartsuccess"
        "400":
          $ref: "#/components/responses/createOrderFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get All Order by User Id
      parameters:
        - $ref: "#/components/parameters/idParam"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getorderbyidsuccess"
        "400":
          $ref: "#/components/responses/OrderResponseFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  /orders/all:
    get:
      tags:
        - Orders
      summary: Get All Order
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getallorder"
        "400":
          $ref: "#/components/responses/OrderResponseFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
  /orders/delete:
    delete:
      tags:
        - Orders
      summary: Delete order by id
      parameters:
        - $ref: "#/components/parameters/idParam"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/deleteDataByIdFailed"
        "500":
          description: Internal server Error
          content:
            application/json:
              schema:
                type: string
              example:
                message: internal server error
    
####################################
#  COMPONENTS
####################################
components:
  schemas:
    requestDataLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    requestDataUser:
      type: object
      required:
        - fullname
        - username
        - phone
        - password
      properties:
        fullname:
          type: string
          minLength: 1
        username:
          type: string
          format: username
          minLength: 5
          description: inputted username must be unique
        phone:
          type: integer
          minLength: 10
        password:
          type: string
          minLength: 6
    requestDataBooksjson:
      type: object
      required:
        - name_books
        - detail_books
        - price
        - stock
        - file
      properties:
        name_books:
          type: string
          minLength: 1
        detail_books:
          type: string
          minLength: 1
        price:
          type: integer
          minimum: 1
        stock:
          type: integer
          minimum: 2
    
    requestDataBooks:
      type: object
      required:
        - file
        - images
        - title
        - price
        - stock
        - author
        - sinopsis
      properties:
        images:
          type: string
          format: binary
          description: "upload book image"
        file:
          type: string
          format: binary
          description: "upload book file"
        title:
          type: string
          description: "input title book here"
        price:
          type: integer
          description: "input price book here"
        stock:
          type: integer
          description: "input stock book here"
        author:
          type: string
          description: "input author book here"
        sinopsis:
          type: string
          description: "input sinopsis book here"
    requestDataBooksUpdate:
      type: object
      required:
        - name_books
        - detail_books
        - price
        - stock
        - file
        - images
      properties:
        name_books:
          type: string
          minLength: 1
        detail_books:
          type: string
          minLength: 1
        price:
          type: integer
          minimum: 1
        stock:
          type: integer
          minimum: 2
        file:
          type: string
          format: binary
          description: "upload file"
        image:
          type: string
          format: binary
          description: "upload image"
    ###
    requestDataOrder:
      type: object
      required:
        - paymentname
        - phone
      properties:
        paymentname:
          type: string
        phone:
          type: string
    requestDataOrderUpdate:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
    responseLoginWithData:
      type: object
      properties:
        code:
          type: integer
        data:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            token:
              type: string
            role:
              type: string
        Message:
          type: string
    responseUserWithData:
      type: object
      properties:
        code:
          type: integer
        data:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            username:
              type: string
            phone:
              type: string
        message:
          type: string
    responseUserWithDataArray:
      type: object
      properties:
        code:
          type: integer
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              username:
                type: string
              phone:
                type: string
        message:
          type: string
    responseBooksWithData:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            detail:
              type: string
            price:
              type: integer
            stock:
              type: integer
            photo:
              type: string
              format: binary
            url:
              type: string
            userid:
              type: int
        message:
          type: string
    responseBooksWithDataArray:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name_books:
                type: string
              detail_books:
                type: string
              price:
                type: integer
              stock:
                type: integer
              photo:
                type: string
                format: binary
              url:
                type: string
              userid:
                type: int
        message:
          type: string
    responseGroupBooksWithData:
      type: object
      properties:
        code:
          type: integer
        data:
          type: object
          properties:
            id:
              type: integer
            booksID:
              type: integer
            nameGroupBooks:
              type: string
            stock:
              type: integer
            capacityGroupBooks:
              type: integer
            price:
              type: integer
            adminFee:
              type: integer
            totalPrice:
              type: integer
            durationGroup:
              type: string
            name_Books:
              type: string
            Status:
              type: string
            url:
              type: string
            getOrder:
              type: array
              items:
                type: object
                properties:
                  orderID:
                    type: integer
                  usersID:
                    type: integer
                  groupBooksID:
                    type: integer
                  name:
                    type: string
        message:
          type: string
    responseGroupBooksWithDataArray:
      type: object
      properties:
        code:
          type: integer
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              booksID:
                type: integer
              nameGroupBooks:
                type: string
              stock:
                type: integer
              capacityGroupBooks:
                type: integer
              price:
                type: integer
              adminFee:
                type: integer
              totalPrice:
                type: integer
              durationGroup:
                type: string
              name_Books:
                type: string
              status:
                type: string
              url:
                type: string
              getOrder:
                type: array
                nullable: true
                items:
                  type: object
                  properties:
                    orderID:
                      type: integer
                    usersID:
                      type: integer
                    groupBooksID:
                      type: integer
                    name:
                      type: string
        message:
          type: string
    responseCreateGroupBooksWithData:
      type: object
      properties:
        code:
          type: integer
        data:
          type: object
          properties:
            groupBooksID:
              type: integer
        message:
          type: string
    responseCreateOrderWithData:
      type: object
      properties:
        code:
          type: integer
        data:
          type: object
          properties:
            orderID:
              type: integer
            ewalletType:
              type: string
            externalId:
              type: string
            amount:
              type: number
            businessId:
              type: string
            created:
              type: string
        message:
          type: string
    responseOrderWithData:
      type: object
      properties:
        code:
          type: integer
        data:
          type: object
          properties:
            id:
              type: integer
            userID:
              type: integer
            groupBooksID:
              type: integer
            nameBooks:
              type: string
            priceOrder:
              type: integer
            detailCredential:
              type: string
        message:
          type: string
    responseOrderWithDataArray:
      type: object
      properties:
        code:
          type: integer
        data:
          type: array
          items:
            type: object
            properties:
              orderID:
                type: integer
              usersID:
                type: integer
              groupBooksID:
                type: integer
              nameBooks:
                type: string
              priceOrder:
                type: integer
              detailCredential:
                type: string
        message:
          type: string
    responseNonData:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
  parameters:
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 1

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  requestBodies:
    requestBodyLogin:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataLogin"
          example:
            username: chaeunwoo
            password: 123
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataLogin"
    requestBodyUser:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataUser"
          examples:
            newUser:
              value:
                fullname: "jungkook bts"
                username: "jungkook"
                phone: "081936665965"
                password: "123"
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataUser"
    requestBodyUserUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataUser"
          examples:
            newData1:
              value:
                fullname: rizunadifa
                username: difa
                phone: "08966066096"
                password: "123"
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataUser"
    requestBodyAddCart:
      required: true
      content:
        application/json:
          schema:
            $ref: "#"
          example:
            books_id: 1
            quantity: 1
            price: 100000
    requestBodyBooks:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataBooks"
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataBooksjson"
          example:
            title: "the rainbow"
            price: 100000
            stock: 5
            author: sejeong kim
            sinopsis: pada jaman dahulu kala
            images: photo.jpg
            file: file.pdf
            
    requestBodyBooksUpdate:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataBooks"
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataBooksjson"
          example:
            title: "the rainbow"
            price: 100000
            stock: 5
            author: sejeong kim
            sinopsis: pada jaman dahulu kala
            images: photo.jpg
            file: file.pdf
    requestBodyOrder:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataOrder"
          example:
            userid: 1
            booksid: 
              - 2
              - 3
            message: Success
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataOrder"
    requestBodyOrderUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataOrderUpdate"
          example:
            detail: "Email: subs.netflix@mail.com, Password: qwerty"
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataOrderUpdate"
  responses:
    loginSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseLoginWithData"
          example:
            token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2Mzk2OTAwMjMsInJvbGUiOiJhZG1pbiIsInVzZXJJZCI6NH0.1Ij1ZVqpqPDOVXzaXyqcyNMlnbLTfwD28Byv0aWNjAQ,
            role: user
            message: Login Success
    loginFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          example:
            message: Username or Password Incorrect
    successOperationNonData:
      description: Success Response Non Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          example:
            Message: Success Operation
    createUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            invalid Fullname:
              $ref: "#/components/examples/invalidFullname"
            invalid Username:
              $ref: "#/components/examples/invalidUsername"
            invalid Password:
              $ref: "#/components/examples/invalidPassword"
            invalid Phone:
              $ref: "#/components/examples/invalidPhone"
            username Already Exist:
              $ref: "#/components/examples/usernameOrPhoneNumberAlreadyExist"
    getAllDataFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            data Not Found:
              $ref: "#/components/examples/dataNotFound"
            bad Request:
              $ref: "#/components/examples/badRequest"
    getUserSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseUserWithData"
          example:
            data: { ID: 1, Fullname: cha eun woo, Username: chaeunwoo, Phone: "081936665965", Password: "123" }
            message: Success Operation
    getDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            invalid Id:
              $ref: "#/components/examples/invalidId"
            data Not Found:
              $ref: "#/components/examples/dataNotFound"
            bad Request:
              $ref: "#/components/examples/badRequest"
    updateUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            invalid Id:
              $ref: "#/components/examples/invalidId"
            data Not Found:
              $ref: "#/components/examples/dataNotFound"
            access Forbidden:
              $ref: "#/components/examples/accessForbidden"
            invalid Fullname:
              $ref: "#/components/examples/invalidFullname"
            invalid Username:
              $ref: "#/components/examples/invalidUsername"
            invalid Password:
              $ref: "#/components/examples/invalidPassword"
            invalid Phone:
              $ref: "#/components/examples/invalidPhone"
            username Already Exist:
              $ref: "#/components/examples/usernameOrPhoneNumberAlreadyExist"
    deleteDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            access Forbidden:
              $ref: "#/components/examples/accessForbidden"
            invalid Id:
              $ref: "#/components/examples/invalidId"
            data Not Found:
              $ref: "#/components/examples/dataNotFound"
    createBooksFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            file Extension Not Allowed:
              $ref: "#/components/examples/fileExtensionNotAllowed"
            illegal File:
              $ref: "#/components/examples/illegalFile"
            size File Too Big:
              $ref: "#/components/examples/sizeFileTooBig"
            access Forbidden:
              $ref: "#/components/examples/accessForbidden"
            bad Request:
              $ref: "#/components/examples/badRequest"
   
    getAllBooksSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseBooksWithDataArray"
          example:
            data:
              [
                {
                  id: 3,
                  title: The Rain,
                  images: https://storage.googleapis.com/Book-store/TheRain.jpg,
                  stock: 6,
                  price: 300000,
                  author: suzy,
                  sinopsis: once upon a time,

                },
                {
                  id: 4,
                  title: The Moon,
                  images: https://storage.googleapis.com/Book-store/theRain.jpg,
                  stock: 4,
                  price: 200000,
                  author: difa,
                  sinopsis: a long time ago,
                },
              ]
            message: Success
    getBooksSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseBooksWithData"
          example:
            data:
              {
                id: 3,
                  title: The Rain,
                  images: TheRain.jpg,
                  url: https://storage.googleapis.com/Book-store/TheRain.jpg,
                  stock: 6,
                  price: 300000,
                  userid: 1,
              }
            message: Success
    updateBooksFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            invalid Id:
              $ref: "#/components/examples/invalidId"
            data not found:
              $ref: "#/components/examples/dataNotFound"
            access forbidden:
              $ref: "#/components/examples/accessForbidden"
            bad request:
              $ref: "#/components/examples/badRequest"
            file extension not allowed:
              $ref: "#/components/examples/fileExtensionNotAllowed"
            size File too big:
              $ref: "#/components/examples/sizeFileTooBig"
    createcartsuccess:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseCreateOrderWithData"
          example:
            Message: Success
    createOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            invalid Param:
              $ref: "#/components/examples/invalidParam"
            bad Request:
              $ref: "#/components/examples/badRequest"
            access Forbidden:
              $ref: "#/components/examples/accessForbidden"
    getcartsuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseOrderWithData"
          example:
            Data:
              [
                {
                  UserID: 15,
                  NameBooks: Netflix,
                  Image: https://img.io/1,
                  PriceOrder: 1254,
                  Qty: 1,
                },
                {
                  UserID: 15,
                  NameBooks: Youtube Premium,
                  Image: https://img.io/2,
                  PriceOrder: 4321,
                  Qty: 1,
                },
              ]
            message: Success Operation
    getorderbyidsuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseOrderWithData"
          example:
            data: [
              {
                ID: 1,
                OrderID: 5,
                InvoiceID: 1,
                Title: "our story",
                Price: 200000,
                Qty: 1,
              }
            ]
            message: "success"
    getallorder:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseOrderWithData"
          example:
            data: [
              {
                ID: 1,
                OrderID: 5,
                InvoiceID: 1,
                Title: "the legend",
                Price: 200000,
                Qty: 1,
              },
              {
                ID: 2,
                OrderID: 6,
                InvoiceID: 1,
                Title: "the Mouse",
                Price: 200000,
                Qty: 1,
              }
            ]
            message: "success"
    
    confirmordersuccess:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseCreateOrderWithData"
          example:
            message: Success
    OrderResponseFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            invalid Id:
              $ref: "#/components/examples/invalidId"
            access Forbidden:
              $ref: "#/components/examples/dataNotFound"
            data Not Found:
              $ref: "#/components/examples/dataNotFound"
            bad Request:
              $ref: "#/components/examples/badRequest"
    getAllcartByIdGroupSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseOrderWithDataArray"
          example:
            data:
              [
                {
                  OrderID: 1,
                  UsersID: 150,
                  GroupBooksID: 1,
                  NameBooks: Netflix,
                  PriceOrder: 1254,
                  DetailCredential: "Username: , Password: ",
                },
                {
                  OrderID: 2,
                  UsersID: 162,
                  GroupBooksID: 1,
                  NameBooks: Netfllix,
                  PriceOrder: 1254,
                  DetailCredential: "Username: , Password: ",
                },
              ]
            message: Success Operation
    getAllcartByIdUserSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseOrderWithDataArray"
          example:
            data:
              [
                {
                  OrderID: 1,
                  UsersID: 150,
                  GroupBooksID: 1,
                  NameBooks: Netflix,
                  PriceOrder: 1254,
                  DetailCredential: "Username: , Password: ",
                },
                {
                  OrderID: 3,
                  UsersID: 150,
                  GroupBooksID: 2,
                  NameBooks: Spotify,
                  PriceOrder: 1500,
                  DetailCredential: "Username: , Password: ",
                },
              ]
            message: Success Operation
    Updatecartsuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseOrderWithData"
          example:
            message: success to update data
    UpdateCartFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#"
          example:
            message: failed to update data
    UpdateOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            details Can't Be Empty:
              $ref: "#/components/examples/detailsCantBeEmpty"
            invalid Id:
              $ref: "#/components/examples/invalidId"
            access Forbidden:
              $ref: "#/components/examples/dataNotFound"
            data Not Found:
              $ref: "#/components/examples/dataNotFound"
            bad Request:
              $ref: "#/components/examples/badRequest"
  examples:
    accessIsDenied:
      value:
        message: Access is denied ID data is in the orderInvalid Id
    accessForbidden:
      value:
        message: Access Forbidden
    badRequest:
      value:
        message: Bad Request
    cantConnecttoServer:
      value:
        Message: Can't Connect to server
    dataisAvailable:
      value:
        message: Data is Available
    dataNotFound:
      value:
        message: Data Not Found
    detailsCantBeEmpty:
      value:
        message: Details Can't Be Empty
    usernameOrPhoneNumberAlreadyExist:
      value:
        message: username or Telephone Number Already Exist
    failedtoUploadFile:
      value:
        message: Failed to Upload File
    fileExtensionNotAllowed:
      value:
        message: File Extension Not Allowed
    
    idBooksNotFound:
      value:
        message: Id Books Not Found
    illegalFile:
      value:
        message: Illegal File
    invalidPassword:
      value:
        message: Invalid Password
    invalidId:
      value:
        message: Invalid Id
    invalidFullname:
      value:
        message: Invalid Fullname
    invalidParam:
      value:
        message: Invalid Param
    invalidTelephoneNumber:
      value:
        message: Invalid Telephone Number
    invalidUsername:
      value:
        message: Invalid Username
    notAvailable:
      value:
        message: Not Available
    invalidPhone:
      value:
        message: Invalid Phone Number
    sizeFileTooBig:
      value:
        message: Size File Too Big