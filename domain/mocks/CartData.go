// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "bookstore/domain"

	mock "github.com/stretchr/testify/mock"
)

// CartData is an autogenerated mock type for the CartData type
type CartData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: data
func (_m *CartData) Delete(data domain.Cart) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Cart) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: id
func (_m *CartData) GetAll(id uint) ([]domain.JoinCartWithBooks, error) {
	ret := _m.Called(id)

	var r0 []domain.JoinCartWithBooks
	if rf, ok := ret.Get(0).(func(uint) []domain.JoinCartWithBooks); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.JoinCartWithBooks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *CartData) Insert(data domain.Cart) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Cart) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCartData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartData creates a new instance of CartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartData(t mockConstructorTestingTNewCartData) *CartData {
	mock := &CartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
